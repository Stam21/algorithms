"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/Games/EasyMode",{

/***/ "./components/Board/astar.js":
/*!***********************************!*\
  !*** ./components/Board/astar.js ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"search\": function() { return /* binding */ search; }\n/* harmony export */ });\nvar cols = 5; //columns in the grid\n\nvar rows = 5; //rows in the grid\n\nvar grid = [new Array(cols)]; //array of all the grid points\n\nvar openSet = []; //array containing unevaluated grid points\n\nvar closedSet = []; //array containing completely evaluated grid points\n\nvar start; //starting grid point\n\nvar end; // ending grid point (goal)\n\nvar path = []; //heuristic we will be using - Manhattan distance\n//for other heuristics visit - https://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html\n\nfunction heuristic(position0, position1) {\n  var d1 = Math.abs(position1.x - position0.x);\n  var d2 = Math.abs(position1.y - position0.y);\n  return d1 + d2;\n} //constructor function to create all the grid points as objects containind the data for the points\n\n\nfunction GridPoint(x, y) {\n  this.x = x; //x location of the grid point\n\n  this.y = y; //y location of the grid point\n\n  this.f = 0; //total cost function\n\n  this.g = 0; //cost function from start to the current grid point\n\n  this.h = 0; //heuristic estimated cost function from current grid point to the goal\n\n  this.neighbors = []; // neighbors of the current grid point\n\n  this.parent = undefined; // immediate source of the current grid point\n  // update neighbors array for a given grid point\n\n  this.updateNeighbors = function (grid) {\n    var i = this.x;\n    var j = this.y;\n\n    if (i < cols - 1) {\n      this.neighbors.push(grid[i + 1][j]);\n    }\n\n    if (i > 0) {\n      this.neighbors.push(grid[i - 1][j]);\n    }\n\n    if (j < rows - 1) {\n      this.neighbors.push(grid[i][j + 1]);\n    }\n\n    if (j > 0) {\n      this.neighbors.push(grid[i][j - 1]);\n    }\n  };\n} //initializing the grid\n\n\n_c = GridPoint;\n\nfunction init() {\n  //making a 2D array\n  for (var i = 0; i < cols; i++) {\n    grid[i] = new Array(rows);\n  }\n\n  for (var _i = 0; _i < cols; _i++) {\n    for (var j = 0; j < rows; j++) {\n      grid[_i][j] = new GridPoint(_i, j);\n    }\n  }\n\n  for (var _i2 = 0; _i2 < cols; _i2++) {\n    for (var _j = 0; _j < rows; _j++) {\n      grid[_i2][_j].updateNeighbors(grid);\n    }\n  }\n} //A star search implementation\n\n\nfunction search(Sx, Sy, Dx, Dy) {\n  init();\n  start = grid[Sx][Sy];\n  end = grid[Dx][Dy];\n  openSet.push(start);\n\n  while (openSet.length > 0) {\n    //assumption lowest index is the first one to begin with\n    var lowestIndex = 0;\n\n    for (var i = 0; i < openSet.length; i++) {\n      if (openSet[i].f < openSet[lowestIndex].f) {\n        lowestIndex = i;\n      }\n    }\n\n    var current = openSet[lowestIndex];\n\n    if (current === end) {\n      var temp = current;\n      path.push(temp);\n\n      while (temp.parent) {\n        path.push(temp.parent);\n        temp = temp.parent;\n      } // return the traced path\n\n\n      console.log(\"PATH\" + path);\n      return [path[0].x, path[0].y, path[1].x, path[1].y];\n    } //remove current from openSet\n\n\n    openSet.splice(lowestIndex, 1); //add current to closedSet\n\n    closedSet.push(current);\n    var neighbors = current.neighbors;\n\n    for (var _i3 = 0; _i3 < neighbors.length; _i3++) {\n      var neighbor = neighbors[_i3];\n\n      if (!closedSet.includes(neighbor)) {\n        var possibleG = current.g + 1;\n\n        if (!openSet.includes(neighbor)) {\n          openSet.push(neighbor);\n        } else if (possibleG >= neighbor.g) {\n          continue;\n        }\n\n        neighbor.g = possibleG;\n        neighbor.h = heuristic(neighbor, end);\n        neighbor.f = neighbor.g + neighbor.h;\n        neighbor.parent = current;\n      }\n    }\n  }\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"GridPoint\");\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/Board/astar.js\n"));

/***/ })

});